name: Build and Release on macOS

on:
  push:
    tags:
      - 'v*'

jobs:
  build-macos-intel:
    runs-on: macos-latest # This will run the job on the latest available macOS version for Intel-based machines
    steps:
    - uses: actions/checkout@v3

    - name: Create temporary keychain
      run: |
        security create-keychain -p "temp-keychain-password" temp.keychain
        security default-keychain -s temp.keychain
        security unlock-keychain -p "temp-keychain-password" temp.keychain
        security set-keychain-settings -t 3600 -l temp.keychain

    - name: Import certificate to temporary keychain
      run: |
        echo "${{ secrets.CERTIFICATE_BASE64 }}" | base64 --decode > thirdai.p12
        security import thirdai.p12 -k ~/Library/Keychains/temp.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T "/usr/bin/codesign"
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp-keychain-password" temp.keychain

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Specify Python version as v3.11

    - name: Install Backend Dependencies
      run: pip install -r backend/requirements.txt

    - name: Install ThirdAI NDB
      run: |
        python -m pip install 'thirdai[neural_db]'

    - name: Install NLTK and Download Stopwords
      run: |
        python -m pip install nltk
        python -m nltk.downloader stopwords

    # Assuming modifications to main_git_action.spec are done before pushing to VCS.
    # If automated edits are needed, add steps here to modify main_git_action.spec as required.
    - name: Get Langchain Path
      run: echo "LANGCHAIN_PATH=$(pip show langchain | grep Location | cut -d' ' -f2)/langchain" >> $GITHUB_ENV

    - name: Get Trafilatura Path
      run: echo "TRAFILATURA_PATH=$(pip show trafilatura | grep Location | cut -d' ' -f2)/trafilatura" >> $GITHUB_ENV

    - name: Get NLTK Stopwords Path
      run: |
        echo "NLTK_STOPWORDS_PATH=$(python -c 'import nltk; print(nltk.data.find("corpora/stopwords"))')" >> $GITHUB_ENV

    - name: Update main_git_action.spec Paths
      run: |
        sed -i '' "s|LANGCHAIN_PATH|${{ env.LANGCHAIN_PATH }}|g" backend/main_git_action.spec
        sed -i '' "s|TRAFILATURA_PATH|${{ env.TRAFILATURA_PATH }}|g" backend/main_git_action.spec
        sed -i '' "s|NLTK_STOPWORDS_PATH|${{ env.NLTK_STOPWORDS_PATH }}|g" backend/main_git_action.spec

    - name: Compile the Backend
      run: |
        cd backend
        pyinstaller main_git_action.spec
    
    - name: Copy Backend to Frontend
      run: cp -R backend/dist/main frontend-intel/pocketllm

    - name: Sign Python Binaries
      run: |
        cd backend
        chmod +x sign_all.sh
        ./sign_all.sh
      shell: bash
      env:
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'node' # Use the latest stable Node.js version

    - name: Install Frontend Dependencies
      run: |
        cd frontend-intel/pocketllm
        npm install

    - name: Package the Frontend
      run: |
        cd frontend-intel/pocketllm
        npm run build
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Debug - List files in dist directory
      run: ls -al ./frontend-intel/pocketllm/dist
      shell: bash

    - name: Find the ZIP file for notarization
      run: |
        FILE=$(find frontend-intel/pocketllm/dist -name 'PocketLLM-*-mac.zip' | head -n 1 | sed 's|^\./||')
        echo "Found file: $FILE"
        echo "FILE_PATH=$FILE" >> $GITHUB_ENV
      shell: bash

    - name: Notarize and Staple
      run: |
        xcrun notarytool submit ${{ env.FILE_PATH }} --apple-id ${{ secrets.APPLE_ID }} --password ${{ secrets.APP_SPECIFIC_PASSWORD }} --team-id KJ35JRW2T6 --wait
      env:
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

    - name: Prepare Artifacts for Upload
      run: |
        mkdir -p artifacts_for_upload
        find frontend-intel/pocketllm/dist -name 'PocketLLM-*-mac.zip' -exec cp {} artifacts_for_upload/ \;
        find frontend-intel/pocketllm/dist -name 'PocketLLM-*.dmg' -exec cp {} artifacts_for_upload/ \;
        find frontend-intel/pocketllm/dist -name 'latest-mac.yml' -exec cp {} artifacts_for_upload/ \;
      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macOS-app-intel
        path: artifacts_for_upload/

  build-macos-m1:
    runs-on: macos-latest-xlarge
    steps:
    - uses: actions/checkout@v3

    - name: Create temporary keychain
      run: |
        security create-keychain -p "temp-keychain-password" temp.keychain
        security default-keychain -s temp.keychain
        security unlock-keychain -p "temp-keychain-password" temp.keychain
        security set-keychain-settings -t 3600 -l temp.keychain

    - name: Import certificate to temporary keychain
      run: |
        echo "${{ secrets.CERTIFICATE_BASE64 }}" | base64 --decode > thirdai.p12
        security import thirdai.p12 -k ~/Library/Keychains/temp.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T "/usr/bin/codesign"
        security set-key-partition-list -S apple-tool:,apple: -s -k "temp-keychain-password" temp.keychain

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Specify Python version as v3.11

    - name: Install Backend Dependencies
      run: pip install -r backend/requirements.txt

    - name: Install ThirdAI NDB
      run: |
        python -m pip install 'thirdai[neural_db]'

    - name: Install NLTK and Download Stopwords
      run: |
        python -m pip install nltk
        python -m nltk.downloader stopwords

    # Assuming modifications to main_git_action.spec are done before pushing to VCS.
    # If automated edits are needed, add steps here to modify main_git_action.spec as required.
    - name: Get Langchain Path
      run: echo "LANGCHAIN_PATH=$(pip show langchain | grep Location | cut -d' ' -f2)/langchain" >> $GITHUB_ENV

    - name: Get Trafilatura Path
      run: echo "TRAFILATURA_PATH=$(pip show trafilatura | grep Location | cut -d' ' -f2)/trafilatura" >> $GITHUB_ENV

    - name: Get NLTK Stopwords Path
      run: |
        echo "NLTK_STOPWORDS_PATH=$(python -c 'import nltk; print(nltk.data.find("corpora/stopwords"))')" >> $GITHUB_ENV

    - name: Update main_git_action.spec Paths
      run: |
        sed -i '' "s|LANGCHAIN_PATH|${{ env.LANGCHAIN_PATH }}|g" backend/main_git_action.spec
        sed -i '' "s|TRAFILATURA_PATH|${{ env.TRAFILATURA_PATH }}|g" backend/main_git_action.spec
        sed -i '' "s|NLTK_STOPWORDS_PATH|${{ env.NLTK_STOPWORDS_PATH }}|g" backend/main_git_action.spec

    - name: Compile the Backend
      run: |
        cd backend
        pyinstaller main_git_action.spec
    
    - name: Copy Backend to Frontend
      run: cp -R backend/dist/main frontend/pocketllm

    - name: Sign Python Binaries
      run: |
        cd backend
        chmod +x sign_all.sh
        ./sign_all.sh
      shell: bash
      env:
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'node' # Use the latest stable Node.js version

    - name: Install Frontend Dependencies
      run: |
        cd frontend/pocketllm
        npm install

    - name: Package the Frontend
      run: |
        cd frontend/pocketllm
        npm run build
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Debug - List files in dist directory
      run: ls -al ./frontend/pocketllm/dist
      shell: bash

    - name: Find the ZIP file for notarization
      run: |
        FILE=$(find frontend/pocketllm/dist -name 'PocketLLM-*-mac.zip' | head -n 1 | sed 's|^\./||')
        echo "Found file: $FILE"
        echo "FILE_PATH=$FILE" >> $GITHUB_ENV
      shell: bash

    - name: Notarize and Staple
      run: |
        xcrun notarytool submit ${{ env.FILE_PATH }} --apple-id ${{ secrets.APPLE_ID }} --password ${{ secrets.APP_SPECIFIC_PASSWORD }} --team-id KJ35JRW2T6 --wait
      env:
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

    - name: Prepare Artifacts for Upload
      run: |
        mkdir -p artifacts_for_upload
        find frontend/pocketllm/dist -name 'PocketLLM-*-mac.zip' -exec cp {} artifacts_for_upload/ \;
        find frontend/pocketllm/dist -name 'PocketLLM-*.dmg' -exec cp {} artifacts_for_upload/ \;
        find frontend/pocketllm/dist -name 'latest-mac.yml' -exec cp {} artifacts_for_upload/ \;
      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macOS-app-m1
        path: artifacts_for_upload/

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Specify Python version as v3.11

    - name: Install Backend Dependencies
      run: pip install -r backend/requirements.txt

    - name: Install ThirdAI NDB
      run: |
        python -m pip install thirdai[neural_db]

    - name: Install NLTK and Download Stopwords
      run: |
        python -m pip install nltk
        python -m nltk.downloader stopwords

    - name: Get Langchain Path
      run: |
        $langchainLocation = pip show langchain | Select-String -Pattern "Location: (.*)" | ForEach-Object { $_.Matches.Groups[1].Value.Trim() }
        $langchainPath = ($langchainLocation -replace '\\', '/') + '/langchain'
        echo "LANGCHAIN_PATH=$langchainPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Get Trafilatura Path
      run: |
        $trafilaturaLocation = pip show trafilatura | Select-String -Pattern "Location: (.*)" | ForEach-Object { $_.Matches.Groups[1].Value.Trim() }
        $trafilaturaPath = ($trafilaturaLocation -replace '\\', '/') + '/trafilatura'
        echo "TRAFILATURA_PATH=$trafilaturaPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Get NLTK Stopwords Path
      run: |
        $nltkPath = python -c "import nltk; print(nltk.data.find('corpora/stopwords').replace('\\', '/'))"
        echo "NLTK_STOPWORDS_PATH=$nltkPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Update main_git_action.spec Paths
      run: |
        $content = Get-Content backend/main_git_action.spec
        $content = $content -replace 'LANGCHAIN_PATH', $env:LANGCHAIN_PATH -replace 'TRAFILATURA_PATH', $env:TRAFILATURA_PATH -replace 'NLTK_STOPWORDS_PATH', $env:NLTK_STOPWORDS_PATH
        $content | Set-Content backend/main_git_action.spec

    - name: Compile the Backend
      run: |
        cd backend
        pyinstaller main_git_action.spec
    
    - name: Copy Backend to Frontend
      run: Copy-Item -Path backend/dist/main -Destination frontend/pocketllm -Recurse

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'node' # Use the latest stable Node.js version

    - name: Install Frontend Dependencies
      run: |
        cd frontend/pocketllm
        npm install

    - name: Package the Frontend
      run: |
        cd frontend/pocketllm
        npm run build
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Debug - List files in dist directory
      run: Get-ChildItem ./frontend/pocketllm/dist -Force | Format-Table
      shell: pwsh

    - name: Prepare Artifacts for Upload
      run: |
        New-Item -ItemType Directory -Force -Path artifacts_for_upload
        Get-ChildItem frontend/pocketllm/dist -Filter '*.exe' | ForEach-Object { Copy-Item $_.FullName artifacts_for_upload }
        Get-ChildItem frontend/pocketllm/dist -Filter 'latest.yml' | ForEach-Object { Copy-Item $_.FullName artifacts_for_upload }
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows-app
        path: artifacts_for_upload/