name: Build and Release on Windows

on:
  push:
    tags:
      - 'win-v*'

jobs:
 build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Specify Python version as v3.11

    - name: Install Backend Dependencies
      run: pip install -r backend/requirements.txt

    # - name: Install ThirdAI NDB
    #   run: |
    #     python -m pip install thirdai[neural_db]

    - name: Install NLTK and Download Stopwords
      run: |
        python -m pip install nltk
        python -m nltk.downloader stopwords

    - name: Get Langchain Path
      run: |
        $langchainLocation = pip show langchain | Select-String -Pattern "Location: (.*)" | ForEach-Object { $_.Matches.Groups[1].Value }
        $langchainPath = "${langchainLocation.replace('\', '/')}/langchain"
        echo "LANGCHAIN_PATH=$langchainPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Get Trafilatura Path
      run: |
        $trafilaturaLocation = pip show trafilatura | Select-String -Pattern "Location: (.*)" | ForEach-Object { $_.Matches.Groups[1].Value }
        $trafilaturaPath = "${trafilaturaLocation.replace('\', '/')}/trafilatura"
        echo "TRAFILATURA_PATH=$trafilaturaPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Get NLTK Stopwords Path
      run: |
        $nltkPath = python -c "import nltk; print(nltk.data.find('corpora/stopwords').replace('\\', '/'))"
        echo "NLTK_STOPWORDS_PATH=$nltkPath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Update main_git_action.spec Paths
      run: |
        $content = Get-Content backend/main_git_action.spec
        $content = $content -replace 'LANGCHAIN_PATH', $env:LANGCHAIN_PATH -replace 'TRAFILATURA_PATH', $env:TRAFILATURA_PATH -replace 'NLTK_STOPWORDS_PATH', $env:NLTK_STOPWORDS_PATH
        $content | Set-Content backend/main_git_action.spec

    - name: Compile the Backend
      run: |
        cd backend
        pyinstaller main_git_action.spec
    
    - name: Copy Backend to Frontend
      run: Copy-Item -Path backend/dist/main -Destination frontend/pocketllm -Recurse

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'node' # Use the latest stable Node.js version

    - name: Install Frontend Dependencies
      run: |
        cd frontend/pocketllm
        npm install

    - name: Package the Frontend
      run: |
        cd frontend/pocketllm
        npm run build
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Debug - List files in dist directory
      run: Get-ChildItem ./frontend/pocketllm/dist -Force | Format-Table
      shell: pwsh

    - name: Prepare Artifacts for Upload
      run: |
        New-Item -ItemType Directory -Force -Path artifacts_for_upload
        Get-ChildItem frontend/pocketllm/dist -Filter '*.exe' | ForEach-Object { Copy-Item $_.FullName artifacts_for_upload }
        Get-ChildItem frontend/pocketllm/dist -Filter 'latest.yml' | ForEach-Object { Copy-Item $_.FullName artifacts_for_upload }
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows-app
        path: artifacts_for_upload/